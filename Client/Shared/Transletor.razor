@using System.Net
@using System.Net.Http.Headers
@page "/Translator"
@inject HttpClient _http

<InputFile OnChange="@OnInputFileChange" multiple />
@if (fileNames.Count > 0)
{
    <ul>
        @foreach (var fileName in fileNames)
        {
            <li>
                File: @fileName
                <br>
                <span>
                    Stored File Name: @GetStroredFileName(fileName);
                </span>
            </li>
        }
    </ul>
}


<form method="post" id="indexID">
    <div>
        <div>

            <div>
                <div class="form-group row">
                    <select id="lengFrom" @bind="lengFrom" >
                        
                        <option selected="selected" value="uk">Ukrainian</option>
                        @*<option value="en">English</option>*@
                        <option value="pl">Polish</option>
                        <option value="ja">Japanese</option>
                        <option value="es">Spanish</option>
                        <option value="de">German</option>
                        <option value="tr">Turkish</option>
                        <option value="zh">Chinese</option>
                        <option value="el">Greek</option>
                    </select>
                    <select id="lengTo" @bind="lengTo" >
                        
                        <option selected="selected" value="uk">Ukrainian</option>
                        @*<option value="en">English</option>*@
                        <option value="pl">Polish</option>
                        <option value="ja">Japanese</option>
                        <option value="es">Spanish</option>
                        <option value="de">German</option>
                        <option value="tr">Turkish</option>
                        <option value="zh">Chinese</option>
                        <option value="el">Greek</option>
                    </select>
                    <div class="col-4">
                        <label for="InputText">Language 1:</label>
                    </div>
                    
                    <div>
                        <input @bind-value="text" type="text" class="form-control" />
                    </div>

                    <div>
                        <input @onclick="PostText" type="button" value="Send" />
                    </div>

                    <div class="col-8">
                        <label for="OutputText">Language 2:</label>
                    </div>
                    <div>
                        <input @bind-value="output" type="text" class="form-control" id="textRes" disabled />
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@code {
    public string? output { get; set; }
    public string text { get; set; } = "";
    public string lengFrom { get; set; } = "en";
    public string lengTo { get; set; } = "pl";

    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();
    private List<Translation> uploadResults = new();

    public async Task PostText()
    {
        var r = new reqf { 
            text = text,
            lengFrom = lengFrom,
            lengTo = lengTo

        };

        var result = await _http.PostAsJsonAsync("api/Translation", r);

        if (result.StatusCode == HttpStatusCode.OK)
        {
            output = await result.Content.ReadAsStringAsync();
            StateHasChanged();
        }


        var boba = 0;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e){
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name 
            );
        }

        var response = await _http.PostAsync($"api/Translation/filename", content);
        var newUploadResults = await response.Content.ReadFromJsonAsync<List<Translation>>();

        if(newUploadResults is not null){
            uploadResults = uploadResults.Concat(newUploadResults).ToList();
        }
    }

    private string? GetStroredFileName(string fileName)
    {
        var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
        if (uploadResult is not null)
        {
            return uploadResult.StoredFileName;
        }

        return "File not found.";
    }
}
