@using System.Net
@using System.Net.Http.Headers
@page "/"
@page "/Translator"
@inject HttpClient _http
           
<div>
    <form method="post" id="indexID">
        <div class="container">
            <div class="form-group row">
                <div class="col-6">
                    <label for="InputText">From language:</label>
                    <select id="lengFrom" @bind="lengFrom">
                        <option selected="selected" value="uk">Ukrainian</option>
                        <option value="en-GB">English</option>
                        <option value="pl">Polish</option>
                        <option value="ja">Japanese</option>
                        <option value="es">Spanish</option>
                        <option value="de">German</option>
                        <option value="tr">Turkish</option>
                        <option value="zh">Chinese</option>
                        <option value="el">Greek</option>
                    </select>
                    <div>
                        <textarea @oninput="handlerOnChange" type="text" class="form-control" rows="5">@text</textarea>
                    </div>
                </div>

                <div class="col-6">
                    <label for="OutputText">To langusge:</label>
                    <select id="lengTo" @bind="lengTo">
                        <option selected="selected" value="uk">Ukrainian</option>
                        <option value="en-GB">English</option>
                        <option value="pl">Polish</option>
                        <option value="ja">Japanese</option>
                        <option value="es">Spanish</option>
                        <option value="de">German</option>
                        <option value="tr">Turkish</option>
                        <option value="zh">Chinese</option>
                        <option value="el">Greek</option>
                    </select>
                    <div>
                        <textarea type="text" class="form-control" id="textRes" disabled rows="5">@output</textarea>
                    </div>
                </div>
            </div>

            <div class="mx-auto pt-4 " style="width: min-content">
                <input @onclick="PostText" type="button" class="btn btn-success" value="Send" style="width: 250px" />
            </div>
        </div>
    </form>
</div>


<div class="d-flex my-4 justify-content-between">
    <InputFile OnChange="@OnInputFileChange" id="importFile" hidden/>
    <label for="importFile" class="btn btn-warning col-3">Import XML</label>

    <button class="btn btn-primary col-3" @onclick="@(() => ExportJson())">Export JSON</button>
</div>

<table class="table" method="get">
    <thead>
        
        <tr>
            <th>Text for translate</th>
            <th>Translated text</th>
            <th>From language</th>
            <th>To language</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in translations)
        {
            <tr>
                <td>@item.InputText</td>
                <td>@item.OutputText</td>
                <td>@item.LanguageFrom</td>
                <td>@item.LanguageTo</td>
            </tr>
        }
    </tbody>
</table>

@code {
    public string? output { get; set; }
    public string text { get; set; } = "";
    public string lengFrom { get; set; } = "en-GB";
    public string lengTo { get; set; } = "pl";

    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private string fileName = "";
    public List<Translation> translations{get; set;} = new List<Translation>();
    public EventCallback<String> childDataChange { get; set; }

    private async Task handlerOnChange(ChangeEventArgs args){
        text = args.Value.ToString();
        await childDataChange.InvokeAsync(text);
    }

    public async Task PostText()
    {
        var r = new reqf { 
            text = text,
            lengFrom = lengFrom,
            lengTo = lengTo

        };

        var result = await _http.PostAsJsonAsync("api/Translation/Translate", r);

        if (result.StatusCode == HttpStatusCode.OK)
        {
            output = await result.Content.ReadAsStringAsync();
            StateHasChanged();
            await CallDb();
        }


    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e){
        using var content = new MultipartFormDataContent();
        var file = e.GetMultipleFiles()[0];

        var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        fileName = file.Name;

        content.Add(
            content: fileContent,
            name: "\"file\"",
            fileName: file.Name 
        );


        var response = await _http.PostAsync($"api/Translation/importXML", content);

        await CallDb();
    }

    private async Task ExportJson(){
        var response = await _http.GetAsync($"api/Translation/exportJSON");


    }

    protected override async Task OnInitializedAsync()
    {
        await CallDb();
    }

    private async Task CallDb()
    {
        var response = await _http.GetFromJsonAsync<List<Translation>>($"api/Translation/getdb");
        if (response is not null)
            translations = response;
    }
}
